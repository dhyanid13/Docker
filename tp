def test_kind_bad_config():
    """Test to check various bad configuration files."""
    bad_files = [
        'kind_bad_format.json',
        'kind_bad_json.json',
        'kind_bad_name.json',
        'kind_bad_schema.json'
    ]
    
    for fn in bad_files:
        file_path = os.path.join(BINDIR, 'etc', fn)
        
        try:
            # Load the config file
            with open(file_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            # Create the Settings object from the loaded config data
            settings_obj = Settings(**config_data)  # Pydantic will validate all fields
            
            # Access the kinds dictionary and check the 'test' kind
            kind_obj = settings_obj.kinds.get('test')
            
            # Perform assertions after validation (if no error occurs)
            assert kind_obj is None  # Adjust this assertion based on your needs
            
        except (FileNotFoundError, json.JSONDecodeError, ValidationError) as e:
            # Handle specific validation failures
            assert True  # This will pass the test if the error is raised
