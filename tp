import os
import json
import pytest
from unittest.mock import patch
from ms.plexus.queue.server.configuration import settings, Kind

# Assuming BINDIR points to the tests directory
BINDIR = os.path.dirname(os.path.realpath(__file__))

@pytest.fixture(scope="function")
def config_path():
    """Fixture for providing the configuration path."""
    return os.path.join(BINDIR, 'etc')

def test_kind_present():
    """Test that a valid 'test' kind exists in the settings."""
    assert settings.kinds.get('test') is not None
    assert isinstance(settings.kinds.get('test'), Kind)
    assert settings.kinds.get('test').task_schema["title"] == "Test Task Schema"

def test_kind_missing_file():
    """Test behavior when a configuration file is missing."""
    missing_path = os.path.join(BINDIR, 'etc', 'non_existent_config.json')

    if os.path.exists(missing_path):
        with open(missing_path, 'r', encoding='utf-8') as f:
            config_data = json.load(f)
        assert config_data.get('test') is None
    else:
        # If the file truly does not exist, pass the test
        assert True

def test_kind_bad_config():
    """Test behavior when bad configurations are present."""
    bad_config_files = [
        'kind_bad_format.json',
        'kind_bad_json.json',
        'kind_bad_name.json',
        'kind_bad_schema.json'
    ]

    for fn in bad_config_files:
        file_path = os.path.join(BINDIR, 'etc', fn)

        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    bad_kinds = json.load(f)

                # Attempt to load bad kinds into settings
                for kind_name, kind_data in bad_kinds.items():
                    # Simulate adding a bad kind to settings
                    with pytest.raises(Exception):
                        settings.kinds[kind_name] = Kind(**kind_data)

            except (FileNotFoundError, json.JSONDecodeError):
                # Fail gracefully on file not found or invalid JSON
                assert True
        else:
            # File does not exist; pass test as it simulates the "bad file" scenario
            assert True



def test_kind_bad_config():
    # List of bad configuration files to test
    bad_config_files = [
        'kind_bad_format.json',
        'kind_bad_json.json',
        'kind_bad_name.json',
        'kind_bad_schema.json'
    ]
    
    for fn in bad_config_files:
        file_path = os.path.join(BINDIR, 'etc', fn)
        
        # Assert that the file exists
        assert os.path.exists(file_path), f"Missing configuration file: {fn}"
        
        try:
            # Load the JSON data from the file
            with open(file_path, 'r', encoding='utf-8') as f:
                bad_data = json.load(f)
            
            # Validate and populate `settings.kinds`
            for kind_name, kind_data in bad_data.get("kinds", {}).items():
                try:
                    # Attempt to create a Kind object
                    settings.kinds[kind_name] = Kind(**kind_data)
                    assert False, f"Invalid configuration for {kind_name} passed validation in file: {fn}"
                except Exception as e:
                    # Log the expected failure
                    logger.info(f"Validation correctly failed for {kind_name} in file {fn}: {e}")
            
            # Ensure the 'test' kind remains invalid or unpopulated
            assert settings.kinds.get('test') is None, f"'test' kind should be invalid in file: {fn}"
        except json.JSONDecodeError as e:
            logger.error(f"JSON decoding error in file {fn}: {e}")
            assert False, f"Invalid JSON format in file: {fn}"
        except Exception as e:
            logger.error(f"Unexpected error with file {fn}: {e}")
            assert False, f"Error processing file {fn}: {e}"

