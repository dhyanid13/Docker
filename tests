import pytest
from httpx import AsyncClient
from unittest.mock import patch

# ✅ Test Data
VALID_PAYLOAD_AWS = {
    "metadata": {
        "cloud": "AWS",
        "region": "us-west-1",
        "account_id": "aws-account-12345"
    },
    "subnets": [
        {"cidr": "10.0.0.0/24", "usage": "Node"},
        {"cidr": "10.0.1.0/24", "usage": "Pod"}
    ]
}

VALID_PAYLOAD_AZURE = {
    "metadata": {
        "cloud": "Azure",
        "region": "east-us",
        "subscription_identifier": "azure-subscription-56789"
    },
    "subnets": [
        {"cidr": "192.168.1.0/24", "usage": "Node"},
        {"cidr": "192.168.2.0/24", "usage": "Service"}
    ]
}

INVALID_PAYLOADS = [
    (  # ❌ Missing metadata
        {},
        400,
    ),
    (  # ❌ Missing `cloud` field
        {"metadata": {"region": "us-west-1", "account_id": "aws-account-12345"}},
        400,
    ),
    (  # ❌ Empty subnets list
        {"metadata": {"cloud": "AWS", "region": "us-west-1", "account_id": "aws-account-12345"}, "subnets": []},
        400,
    ),
    (  # ❌ Invalid CIDR format
        {"metadata": {"cloud": "AWS", "region": "us-west-1", "account_id": "aws-account-12345"},
         "subnets": [{"cidr": "invalid-cidr", "usage": "Node"}]},
        422,
    ),
]


@pytest.mark.asyncio
@pytest.mark.parametrize("payload,expected_status", INVALID_PAYLOADS)
async def test_update_subnet_invalid_payload(client: AsyncClient, payload, expected_status):
    response = await client.put("/subnets_query/AWS/1/test-key", json=payload)
    assert response.status_code == expected_status


@pytest.mark.asyncio
async def test_update_subnet_valid_aws(client: AsyncClient):
    response = await client.put("/subnets_query/AWS/1/test-key", json=VALID_PAYLOAD_AWS)
    assert response.status_code == 200
    assert response.json()["status"] == "success"


@pytest.mark.asyncio
async def test_update_subnet_valid_azure(client: AsyncClient):
    response = await client.put("/subnets_query/Azure/1/test-key", json=VALID_PAYLOAD_AZURE)
    assert response.status_code == 200
    assert response.json()["status"] == "success"


@pytest.mark.asyncio
async def test_update_subnet_unauthorized(client: AsyncClient):
    response = await client.put("/subnets_query/AWS/1/test-key", json=VALID_PAYLOAD_AWS, headers={})
    assert response.status_code == 401


@pytest.mark.asyncio
async def test_update_subnet_forbidden(client: AsyncClient):
    with patch("app.auth.verify_permissions", return_value=False):  # Mock permission failure
        response = await client.put("/subnets_query/AWS/1/test-key", json=VALID_PAYLOAD_AWS)
        assert response.status_code == 403


@pytest.mark.asyncio
async def test_update_subnet_not_found(client: AsyncClient):
    with patch("app.database.get_subnet", return_value=None):  # Simulate missing resource
        response = await client.put("/subnets_query/AWS/1/nonexistent-key", json=VALID_PAYLOAD_AWS)
        assert response.status_code == 404


@pytest.mark.asyncio
async def test_update_subnet_cidr_conflict(client: AsyncClient):
    conflicting_payload = {
        "metadata": {
            "cloud": "AWS",
            "region": "us-west-1",
            "account_id": "aws-account-12345"
        },
        "subnets": [
            {"cidr": "10.0.0.0/24", "usage": "Node"},
            {"cidr": "10.0.0.0/24", "usage": "Pod"}  # Duplicate CIDR
        ]
    }
    response = await client.put("/subnets_query/AWS/1/test-key", json=conflicting_payload)
    assert response.status_code == 409


@pytest.mark.asyncio
async def test_update_subnet_rate_limit(client: AsyncClient):
    for _ in range(5):  # Simulate rapid requests
        await client.put("/subnets_query/AWS/1/test-key", json=VALID_PAYLOAD_AWS)
    
    response = await client.put("/subnets_query/AWS/1/test-key", json=VALID_PAYLOAD_AWS)
    assert response.status_code == 429


import pytest
from httpx import AsyncClient
from unittest.mock import patch

# ✅ Mock Response Object
MOCK_RULE_DATA = {
    "rule_name": "allow-ssh",
    "firewall_name": "fw-123",
    "status": "active",
    "targets": [
        {"ip": "192.168.1.10", "action": "allow"},
        {"ip": "192.168.1.20", "action": "deny"}
    ]
}

@pytest.mark.asyncio
async def test_get_rule_data_success(client: AsyncClient):
    with patch("app.database.get_rule_data", return_value=MOCK_RULE_DATA):  # Mock DB call
        response = await client.get("/rule_state/allow-ssh/fw-123/data")
    
    assert response.status_code == 200
    assert response.json() == MOCK_RULE_DATA


@pytest.mark.asyncio
async def test_get_rule_data_not_found(client: AsyncClient):
    with patch("app.database.get_rule_data", return_value=None):  # Simulate missing rule
        response = await client.get("/rule_state/nonexistent/fw-123/data")
    
    assert response.status_code == 404
    assert response.json()["detail"] == "Rule not found"


@pytest.mark.asyncio
async def test_get_rule_data_bad_request(client: AsyncClient):
    response = await client.get("/rule_state//fw-123/data")  # Missing rule_name
    assert response.status_code == 400


@pytest.mark.asyncio
async def test_get_rule_data_internal_server_error(client: AsyncClient):
    with patch("app.database.get_rule_data", side_effect=Exception("DB Error")):  # Simulate DB failure
        response = await client.get("/rule_state/allow-ssh/fw-123/data")
    
    assert response.status_code == 500
    assert response.json()["detail"] == "Internal Server Error"





























import pytest

@pytest.mark.asyncio
async def test_get_rule_state(client):
    """Test fetching rule state for a given rule and firewall."""
    response = await client.get("/rule_state/my_rule/my_firewall")
    
    assert response.status_code in [200, 404]
    if response.status_code == 200:
        data = response.json()
        assert data["rule_name"] == "my_rule"
        assert data["firewall_name"] == "my_firewall"
        assert "lifecycle" in data  # Ensure lifecycle state is present

@pytest.mark.asyncio
async def test_get_rule_data(client):
    """Test fetching subnet data associated with a rule."""
    response = await client.get("/rule_state/my_rule/my_firewall/data")

    assert response.status_code in [200, 404]
    if response.status_code == 200:
        data = response.json()
        assert isinstance(data["subnets"], list)
        assert "timestamp" in data

@pytest.mark.asyncio
async def test_update_rule_state(client):
    """Test updating rule state with a new timestamp."""
    payload = {
        "current_timestamp": "2025-03-03T12:30:00",
        "rtype": "firewall-rule"
    }

    response = await client.put("/rule_state/my_rule/my_firewall", json=payload)

    assert response.status_code in [200, 404, 409]
    if response.status_code == 200:
        data = response.json()
        assert data["current_timestamp"] == "2025-03-03T12:30:00"

@pytest.mark.asyncio
async def test_delete_rule_state(client):
    """Test deleting a rule state (should only work if it's 'deprecated')."""
    response = await client.delete("/rule_state/my_rule/my_firewall")

    assert response.status_code in [204, 404, 409]  # 409 if not deprecated


import pytest

@pytest.mark.asyncio
async def test_get_subnets(client):
    """Test fetching subnets with query parameters."""
    params = {"kind": "vpc", "cloud": "aws"}
    response = await client.get("/subnets", params=params)

    assert response.status_code in [200, 404]
    if response.status_code == 200:
        assert isinstance(response.json(), list)

@pytest.mark.asyncio
async def test_get_specific_subnet(client):
    """Test fetching a subnet by kind, version, and resource key."""
    response = await client.get("/subnets/vpc/1/resource123")

    assert response.status_code in [200, 404]
    if response.status_code == 200:
        assert response.json()[0]["kind"] == "vpc"

@pytest.mark.asyncio
async def test_update_subnet(client):
    """Test updating subnet metadata."""
    payload = {
        "metadata": {"cloud": "aws", "region": "us-east-1"},
        "subnets": [{"usage": "app", "cidr": "192.168.1.0/24"}]
    }
    
    response = await client.put("/subnets/vpc/1/resource123", json=payload)

    assert response.status_code in [200, 404]
    if response.status_code == 200:
        assert response.json()["affected_rules"]

@pytest.mark.asyncio
async def test_delete_subnet(client):
    """Test deleting a subnet."""
    response = await client.delete("/subnets/vpc/1/resource123")

    assert response.status_code in [204, 404]

import pytest
from datetime import datetime

@pytest.mark.asyncio
async def test_get_rule_state(client):
    """Test fetching a rule's state for a firewall."""
    response = await client.get("/rule_state/test_rule/test_firewall")

    assert response.status_code in [200, 404]
    if response.status_code == 200:
        assert response.json()["rule_name"] == "test_rule"
        assert response.json()["firewall_name"] == "test_firewall"

@pytest.mark.asyncio
async def test_get_rule_data(client):
    """Test fetching subnet data required by a rule."""
    response = await client.get("/rule_state/test_rule/test_firewall/data")

    assert response.status_code in [200, 404]
    if response.status_code == 200:
        assert "subnets" in response.json()
        assert isinstance(response.json()["subnets"], list)

@pytest.mark.asyncio
async def test_update_rule_state(client):
    """Test updating a rule state."""
    payload = {
        "current_timestamp": datetime.utcnow().isoformat(),
        "lifecycle": "active"
    }
    
    response = await client.put("/rule_state/test_rule/test_firewall", json=payload)

    assert response.status_code in [200, 404, 409]  # 409 if timestamp issue
    if response.status_code == 200:
        assert response.json()["lifecycle"] == "active"

@pytest.mark.asyncio
async def test_delete_rule_state(client):
    """Test deleting a rule state (only if deprecated)."""
    response = await client.delete("/rule_state/test_rule/test_firewall")

    assert response.status_code in [204, 404, 409]  # 409 if not deprecated
