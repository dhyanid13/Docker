import pytest
from httpx import AsyncClient
from ms.plexus.api.firewall.model import SubnetDoc
from datetime import datetime

@pytest.mark.asyncio
async def test_update_subnet_info_valid_azure_eastus2(http_client: AsyncClient):
    """Test updating subnet info for Azure in eastus2 region with node usage"""

    payload = {
        "metadata": {
            "cloud": "azure",
            "region": "eastus2",
            "env": "dev",
            "network_zone": "msinternal"
        },
        "subnets": [
            {
                "usage": "node",
                "cidr": "10.0.0.0/24",
                "name": "node-subnet-01",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    response = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data["affected_rules"], list)

@pytest.mark.asyncio
async def test_update_subnet_info_valid_aws_us_west_2(http_client: AsyncClient):
    """Test updating subnet info for AWS in us-west-2 region with service usage"""

    payload = {
        "metadata": {
            "cloud": "aws",
            "region": "us-west-2",
            "env": "prod",
            "network_zone": "msinternal"
        },
        "subnets": [
            {
                "usage": "service",
                "cidr": "192.168.1.0/24",
                "name": "service-subnet-01",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    response = await http_client.put("/aws/1/abc.test.cluster.fqdn.ms.com", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data["affected_rules"], list)

@pytest.mark.asyncio
async def test_update_subnet_info_pod_usage(http_client: AsyncClient):
    """Test updating subnet info with usage type as pod"""

    payload = {
        "metadata": {
            "cloud": "azure",
            "region": "eastus2",
            "env": "dev",
            "network_zone": "msinternal"
        },
        "subnets": [
            {
                "usage": "pod",
                "cidr": "10.10.0.0/24",
                "name": "pod-subnet-01",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    response = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data["affected_rules"], list)

@pytest.mark.asyncio
async def test_update_subnet_info_invalid_missing_metadata(http_client: AsyncClient):
    """Test updating subnet info with missing metadata (should return 422)"""

    payload = {
        "subnets": [
            {
                "usage": "node",
                "cidr": "10.0.0.0/24",
                "name": "node-subnet-01",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    response = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload)
    assert response.status_code == 422  # Missing metadata should cause validation error

@pytest.mark.asyncio
async def test_update_subnet_info_invalid_cidr_format(http_client: AsyncClient):
    """Test updating subnet info with an invalid CIDR format (should return 422)"""

    payload = {
        "metadata": {
            "cloud": "azure",
            "region": "eastus2",
            "env": "dev",
            "network_zone": "msinternal"
        },
        "subnets": [
            {
                "usage": "node",
                "cidr": "invalid-cidr",
                "name": "node-subnet-01",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    response = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload)
    assert response.status_code == 422  # Invalid CIDR should cause validation error

@pytest.mark.asyncio
async def test_update_subnet_info_different_envs(http_client: AsyncClient):
    """Test updating subnet info with different environments (dev, prod)"""

    payload_dev = {
        "metadata": {
            "cloud": "azure",
            "region": "eastus2",
            "env": "dev",
            "network_zone": "msinternal"
        },
        "subnets": [
            {
                "usage": "node",
                "cidr": "10.0.1.0/24",
                "name": "node-subnet-dev",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    payload_prod = {
        "metadata": {
            "cloud": "azure",
            "region": "eastus2",
            "env": "prod",
            "network_zone": "msinternal"
        },
        "subnets": [
            {
                "usage": "node",
                "cidr": "10.0.2.0/24",
                "name": "node-subnet-prod",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    response_dev = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload_dev)
    response_prod = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload_prod)

    assert response_dev.status_code == 200
    assert response_prod.status_code == 200

@pytest.mark.asyncio
async def test_update_subnet_info_duplicate_insertion(http_client: AsyncClient):
    """Ensure duplicate subnet info updates replace existing ones"""

    payload = {
        "metadata": {
            "cloud": "azure",
            "region": "eastus2",
            "env": "dev",
            "network_zone": "msinternal"
        },
        "subnets": [
            {
                "usage": "node",
                "cidr": "10.0.0.0/24",
                "name": "node-subnet-01",
                "timestamp": "2025-03-10T07:17:11.484+00:00"
            }
        ]
    }

    # First request
    response1 = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload)
    assert response1.status_code == 200

    # Second request (same data)
    response2 = await http_client.put("/azure/1/abc.test.cluster.fqdn.ms.com", json=payload)
    assert response2.status_code == 200

    # Ensure only one document exists
    subnet_count = await SubnetDoc.find(
        SubnetDoc.kind == "azure.aks",
        SubnetDoc.version == 1,
        SubnetDoc.resource_key == "abc.test.cluster.fqdn.ms.com"
    ).count()

    assert subnet_count == 1  # Old record should be replaced
