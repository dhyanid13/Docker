import pytest
from httpx import AsyncClient
from datetime import datetime
from ms.plexus.api.firewall.model import MetadataUpload, SubnetData, AzureNetworkMetadata, RuleImplementationKey

@pytest.mark.anyio
async def test_update_subnet_info(http_client: AsyncClient, database_client):
    """Test updating subnet info for different regions, environments, and usages."""
    
    url = "/subnets/azure.aks/1/abc.test.cluster.fqdn.ms.com"

    # Test payload covering different regions, environments, and subnet usages
    test_payload = MetadataUpload(
        metadata=AzureNetworkMetadata(
            cloud="azure",
            tenant="msad",
            segdom_name="infra-dev-genpop",
            subscription_identifier="mce",
            spoke_identifier="aks-client-03",
            region="eastus2",
            env="dev",
            network_zone="msinternal"
        ),
        subnets=[
            SubnetData(usage="node", cidr="10.0.1.0/24", name="node-subnet-01"),
            SubnetData(usage="pod", cidr="10.0.2.0/24", name="pod-subnet-02"),
            SubnetData(usage="service", cidr="10.0.3.0/24", name="service-subnet-03"),
        ]
    )

    response = await http_client.put(url, json=test_payload.model_dump())

    assert response.status_code == 200
    response_data = response.json()
    
    # Validate response structure
    assert "timestamp" in response_data
    assert "affected_rules" in response_data
    assert isinstance(response_data["affected_rules"], list)

    # Ensure affected rules contain expected values
    for rule in response_data["affected_rules"]:
        assert "rule_name" in rule
        assert "firewall_name" in rule

    # Ensure timestamp is correctly set
    timestamp = datetime.fromisoformat(response_data["timestamp"])
    assert timestamp <= datetime.utcnow()  # Timestamp should not be in the future

@pytest.mark.anyio
async def test_update_subnet_no_matching_firewall(http_client: AsyncClient, database_client):
    """Test API behavior when no matching firewalls exist for the metadata."""

    url = "/subnets/azure.aks/1/nonexistent.cluster.fqdn.ms.com"

    test_payload = MetadataUpload(
        metadata=AzureNetworkMetadata(
            cloud="azure",
            tenant="msad",
            segdom_name="nonexistent-segdom",
            subscription_identifier="mce",
            spoke_identifier="aks-client-03",
            region="nowhere",
            env="dev",
            network_zone="msinternal"
        ),
        subnets=[SubnetData(usage="node", cidr="10.0.1.0/24", name="node-subnet-01")]
    )

    response = await http_client.put(url, json=test_payload.model_dump())

    assert response.status_code == 200  # API should still return success
    response_data = response.json()
    assert response_data["affected_rules"] == []  # No affected rules since no firewall matched

@pytest.mark.anyio
async def test_update_subnet_no_matching_ruleset(http_client: AsyncClient, database_client):
    """Test API behavior when no matching ruleset exists for a subnet."""

    url = "/subnets/azure.aks/1/abc.test.cluster.fqdn.ms.com"

    test_payload = MetadataUpload(
        metadata=AzureNetworkMetadata(
            cloud="azure",
            tenant="msad",
            segdom_name="infra-dev-genpop",
            subscription_identifier="mce",
            spoke_identifier="aks-client-03",
            region="eastus2",
            env="dev",
            network_zone="msinternal"
        ),
        subnets=[SubnetData(usage="unknown-usage", cidr="10.0.4.0/24", name="unknown-subnet")]
    )

    response = await http_client.put(url, json=test_payload.model_dump())

    assert response.status_code == 200
    response_data = response.json()
    assert response_data["affected_rules"] == []  # No rules should be affected

@pytest.mark.anyio
async def test_update_subnet_existing_rule_implementation(http_client: AsyncClient, database_client):
    """Ensure the API updates timestamps for existing rule implementations."""

    url = "/subnets/azure.aks/1/abc.test.cluster.fqdn.ms.com"

    test_payload = MetadataUpload(
        metadata=AzureNetworkMetadata(
            cloud="azure",
            tenant="msad",
            segdom_name="infra-dev-genpop",
            subscription_identifier="mce",
            spoke_identifier="aks-client-03",
            region="eastus2",
            env="dev",
            network_zone="msinternal"
        ),
        subnets=[SubnetData(usage="node", cidr="10.0.1.0/24", name="node-subnet-01")]
    )

    # First update to create the rule implementation
    response1 = await http_client.put(url, json=test_payload.model_dump())
    assert response1.status_code == 200
    response_data1 = response1.json()
    first_timestamp = datetime.fromisoformat(response_data1["timestamp"])

    # Second update to check timestamp update
    response2 = await http_client.put(url, json=test_payload.model_dump())
    assert response2.status_code == 200
    response_data2 = response2.json()
    second_timestamp = datetime.fromisoformat(response_data2["timestamp"])

    assert second_timestamp > first_timestamp  # Timestamp should be updated

@pytest.mark.anyio
async def test_update_subnet_new_rule_implementation(http_client: AsyncClient, database_client):
    """Ensure the API creates new rule implementation records when needed."""

    url = "/subnets/azure.aks/1/new.cluster.fqdn.ms.com"

    test_payload = MetadataUpload(
        metadata=AzureNetworkMetadata(
            cloud="azure",
            tenant="msad",
            segdom_name="infra-dev-genpop",
            subscription_identifier="mce",
            spoke_identifier="aks-client-03",
            region="westus",
            env="prod",
            network_zone="msinternal"
        ),
        subnets=[SubnetData(usage="pod", cidr="10.0.2.0/24", name="pod-subnet-02")]
    )

    response = await http_client.put(url, json=test_payload.model_dump())

    assert response.status_code == 200
    response_data = response.json()

    assert len(response_data["affected_rules"]) > 0  # Ensure new rule implementations are created
